/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
        ArrayList<Interval> result = new ArrayList<>();
        int n = intervals.size();

        for(int i=0; i<n; i++){
            Interval current_interval = intervals.get(i);
            if(newInterval.start > current_interval.end){
                result.add(current_interval);
            }
            else if(current_interval.start > newInterval.end){
                result.add(newInterval);
                for(int j=i; j<n; j++){
                    result.add(intervals.get(j));
                }
                return result;
            }
            else{
                newInterval.start = Math.min(newInterval.start, current_interval.start);
                newInterval.end = Math.max(newInterval.end, current_interval.end);
            }
        }
        result.add(newInterval);
        return result;
    }
}
