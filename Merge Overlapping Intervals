/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
         ArrayList<Interval> result = new ArrayList<>();
        int n = intervals.size();
        Collections.sort(intervals, (a,b) -> {
            return a.start - b.start;
        });

        int current_start = intervals.get(0).start;
        int current_end = intervals.get(0).end;

        for(int i=1; i<n; i++){
            if(current_end >= intervals.get(i).start){
                current_end = Math.max(current_end, intervals.get(i).end);
            }
            else{
                Interval temp = new Interval(current_start, current_end);
                result.add(temp);
                current_start = intervals.get(i).start;
                current_end = intervals.get(i).end;
            }
        }
        Interval temp = new Interval(current_start, current_end);
        result.add(temp);
        return result;
    }
}
